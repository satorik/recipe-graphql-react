# source: https://recipe-graphql-6137fb7608.herokuapp.com/graphql-prisma/dev
# timestamp: Tue May 21 2019 15:38:51 GMT+0300 (GMT+03:00)

type AggregateIngredient {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateRecipeContent {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Ingredient implements Node {
  id: ID!
  name: String!
  metrics: String!
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  recipeContents(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeContent!]
}

"""A connection to a list of items."""
type IngredientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  name: String!
  metrics: String!
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
  recipeContents: RecipeContentCreateManyWithoutIngredientInput
}

input IngredientCreateOneWithoutRecipeContentsInput {
  create: IngredientCreateWithoutRecipeContentsInput
  connect: IngredientWhereUniqueInput
}

input IngredientCreateWithoutRecipeContentsInput {
  id: ID
  name: String!
  metrics: String!
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
}

"""An edge in a connection."""
type IngredientEdge {
  """The item at the end of the edge."""
  node: Ingredient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  metrics_ASC
  metrics_DESC
  ccal_ASC
  ccal_DESC
  fat_ASC
  fat_DESC
  carbon_ASC
  carbon_DESC
  protein_ASC
  protein_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  metrics: String!
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

input IngredientUpdateInput {
  name: String
  metrics: String
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
  recipeContents: RecipeContentUpdateManyWithoutIngredientInput
}

input IngredientUpdateManyMutationInput {
  name: String
  metrics: String
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
}

input IngredientUpdateOneRequiredWithoutRecipeContentsInput {
  create: IngredientCreateWithoutRecipeContentsInput
  connect: IngredientWhereUniqueInput
  update: IngredientUpdateWithoutRecipeContentsDataInput
  upsert: IngredientUpsertWithoutRecipeContentsInput
}

input IngredientUpdateWithoutRecipeContentsDataInput {
  name: String
  metrics: String
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
}

input IngredientUpsertWithoutRecipeContentsInput {
  update: IngredientUpdateWithoutRecipeContentsDataInput!
  create: IngredientCreateWithoutRecipeContentsInput!
}

input IngredientWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  metrics: String

  """All values that are not equal to given value."""
  metrics_not: String

  """All values that are contained in given list."""
  metrics_in: [String!]

  """All values that are not contained in given list."""
  metrics_not_in: [String!]

  """All values less than the given value."""
  metrics_lt: String

  """All values less than or equal the given value."""
  metrics_lte: String

  """All values greater than the given value."""
  metrics_gt: String

  """All values greater than or equal the given value."""
  metrics_gte: String

  """All values containing the given string."""
  metrics_contains: String

  """All values not containing the given string."""
  metrics_not_contains: String

  """All values starting with the given string."""
  metrics_starts_with: String

  """All values not starting with the given string."""
  metrics_not_starts_with: String

  """All values ending with the given string."""
  metrics_ends_with: String

  """All values not ending with the given string."""
  metrics_not_ends_with: String
  ccal: Int

  """All values that are not equal to given value."""
  ccal_not: Int

  """All values that are contained in given list."""
  ccal_in: [Int!]

  """All values that are not contained in given list."""
  ccal_not_in: [Int!]

  """All values less than the given value."""
  ccal_lt: Int

  """All values less than or equal the given value."""
  ccal_lte: Int

  """All values greater than the given value."""
  ccal_gt: Int

  """All values greater than or equal the given value."""
  ccal_gte: Int
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbon: Int

  """All values that are not equal to given value."""
  carbon_not: Int

  """All values that are contained in given list."""
  carbon_in: [Int!]

  """All values that are not contained in given list."""
  carbon_not_in: [Int!]

  """All values less than the given value."""
  carbon_lt: Int

  """All values less than or equal the given value."""
  carbon_lte: Int

  """All values greater than the given value."""
  carbon_gt: Int

  """All values greater than or equal the given value."""
  carbon_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  recipeContents_every: RecipeContentWhereInput
  recipeContents_some: RecipeContentWhereInput
  recipeContents_none: RecipeContentWhereInput
}

input IngredientWhereUniqueInput {
  id: ID
  name: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  createRecipe(data: RecipeCreateInput!): Recipe!
  createRecipeContent(data: RecipeContentCreateInput!): RecipeContent!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateRecipeContent(data: RecipeContentUpdateInput!, where: RecipeContentWhereUniqueInput!): RecipeContent
  deleteUser(where: UserWhereUniqueInput!): User
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteRecipeContent(where: RecipeContentWhereUniqueInput!): RecipeContent
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  upsertRecipeContent(where: RecipeContentWhereUniqueInput!, create: RecipeContentCreateInput!, update: RecipeContentUpdateInput!): RecipeContent!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  updateManyRecipes(data: RecipeUpdateManyMutationInput!, where: RecipeWhereInput): BatchPayload!
  updateManyRecipeContents(data: RecipeContentUpdateManyMutationInput!, where: RecipeContentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  deleteManyRecipeContents(where: RecipeContentWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  recipeContents(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeContent]!
  user(where: UserWhereUniqueInput!): User
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipeContent(where: RecipeContentWhereUniqueInput!): RecipeContent
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  recipeContentsConnection(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeContentConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Recipe implements Node {
  id: ID!
  title: String!
  desc: String
  rules: String!
  author: User!
  recipeContent(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeContent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RecipeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

type RecipeContent implements Node {
  id: ID!
  ingredient: Ingredient!
  amount: Float!
  recipe: Recipe
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RecipeContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecipeContentEdge]!
  aggregate: AggregateRecipeContent!
}

input RecipeContentCreateInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneWithoutRecipeContentsInput!
  recipe: RecipeCreateOneWithoutRecipeContentInput
}

input RecipeContentCreateManyWithoutIngredientInput {
  create: [RecipeContentCreateWithoutIngredientInput!]
  connect: [RecipeContentWhereUniqueInput!]
}

input RecipeContentCreateManyWithoutRecipeInput {
  create: [RecipeContentCreateWithoutRecipeInput!]
  connect: [RecipeContentWhereUniqueInput!]
}

input RecipeContentCreateWithoutIngredientInput {
  id: ID
  amount: Float!
  recipe: RecipeCreateOneWithoutRecipeContentInput
}

input RecipeContentCreateWithoutRecipeInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneWithoutRecipeContentsInput!
}

"""An edge in a connection."""
type RecipeContentEdge {
  """The item at the end of the edge."""
  node: RecipeContent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecipeContentOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecipeContentPreviousValues {
  id: ID!
  amount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RecipeContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeContentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RecipeContentSubscriptionPayload {
  mutation: MutationType!
  node: RecipeContent
  updatedFields: [String!]
  previousValues: RecipeContentPreviousValues
}

input RecipeContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeContentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecipeContentWhereInput
}

input RecipeContentUpdateInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredWithoutRecipeContentsInput
  recipe: RecipeUpdateOneWithoutRecipeContentInput
}

input RecipeContentUpdateManyDataInput {
  amount: Float
}

input RecipeContentUpdateManyMutationInput {
  amount: Float
}

input RecipeContentUpdateManyWithoutIngredientInput {
  create: [RecipeContentCreateWithoutIngredientInput!]
  connect: [RecipeContentWhereUniqueInput!]
  set: [RecipeContentWhereUniqueInput!]
  disconnect: [RecipeContentWhereUniqueInput!]
  delete: [RecipeContentWhereUniqueInput!]
  update: [RecipeContentUpdateWithWhereUniqueWithoutIngredientInput!]
  updateMany: [RecipeContentUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeContentScalarWhereInput!]
  upsert: [RecipeContentUpsertWithWhereUniqueWithoutIngredientInput!]
}

input RecipeContentUpdateManyWithoutRecipeInput {
  create: [RecipeContentCreateWithoutRecipeInput!]
  connect: [RecipeContentWhereUniqueInput!]
  set: [RecipeContentWhereUniqueInput!]
  disconnect: [RecipeContentWhereUniqueInput!]
  delete: [RecipeContentWhereUniqueInput!]
  update: [RecipeContentUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [RecipeContentUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeContentScalarWhereInput!]
  upsert: [RecipeContentUpsertWithWhereUniqueWithoutRecipeInput!]
}

input RecipeContentUpdateManyWithWhereNestedInput {
  where: RecipeContentScalarWhereInput!
  data: RecipeContentUpdateManyDataInput!
}

input RecipeContentUpdateWithoutIngredientDataInput {
  amount: Float
  recipe: RecipeUpdateOneWithoutRecipeContentInput
}

input RecipeContentUpdateWithoutRecipeDataInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredWithoutRecipeContentsInput
}

input RecipeContentUpdateWithWhereUniqueWithoutIngredientInput {
  where: RecipeContentWhereUniqueInput!
  data: RecipeContentUpdateWithoutIngredientDataInput!
}

input RecipeContentUpdateWithWhereUniqueWithoutRecipeInput {
  where: RecipeContentWhereUniqueInput!
  data: RecipeContentUpdateWithoutRecipeDataInput!
}

input RecipeContentUpsertWithWhereUniqueWithoutIngredientInput {
  where: RecipeContentWhereUniqueInput!
  update: RecipeContentUpdateWithoutIngredientDataInput!
  create: RecipeContentCreateWithoutIngredientInput!
}

input RecipeContentUpsertWithWhereUniqueWithoutRecipeInput {
  where: RecipeContentWhereUniqueInput!
  update: RecipeContentUpdateWithoutRecipeDataInput!
  create: RecipeContentCreateWithoutRecipeInput!
}

input RecipeContentWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  ingredient: IngredientWhereInput
  recipe: RecipeWhereInput
}

input RecipeContentWhereUniqueInput {
  id: ID
}

input RecipeCreateInput {
  id: ID
  title: String!
  desc: String
  rules: String!
  author: UserCreateOneWithoutRecipesInput!
  recipeContent: RecipeContentCreateManyWithoutRecipeInput
}

input RecipeCreateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
}

input RecipeCreateOneWithoutRecipeContentInput {
  create: RecipeCreateWithoutRecipeContentInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutAuthorInput {
  id: ID
  title: String!
  desc: String
  rules: String!
  recipeContent: RecipeContentCreateManyWithoutRecipeInput
}

input RecipeCreateWithoutRecipeContentInput {
  id: ID
  title: String!
  desc: String
  rules: String!
  author: UserCreateOneWithoutRecipesInput!
}

"""An edge in a connection."""
type RecipeEdge {
  """The item at the end of the edge."""
  node: Recipe!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  desc_ASC
  desc_DESC
  rules_ASC
  rules_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecipePreviousValues {
  id: ID!
  title: String!
  desc: String
  rules: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RecipeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  rules: String

  """All values that are not equal to given value."""
  rules_not: String

  """All values that are contained in given list."""
  rules_in: [String!]

  """All values that are not contained in given list."""
  rules_not_in: [String!]

  """All values less than the given value."""
  rules_lt: String

  """All values less than or equal the given value."""
  rules_lte: String

  """All values greater than the given value."""
  rules_gt: String

  """All values greater than or equal the given value."""
  rules_gte: String

  """All values containing the given string."""
  rules_contains: String

  """All values not containing the given string."""
  rules_not_contains: String

  """All values starting with the given string."""
  rules_starts_with: String

  """All values not starting with the given string."""
  rules_not_starts_with: String

  """All values ending with the given string."""
  rules_ends_with: String

  """All values not ending with the given string."""
  rules_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
}

input RecipeUpdateInput {
  title: String
  desc: String
  rules: String
  author: UserUpdateOneRequiredWithoutRecipesInput
  recipeContent: RecipeContentUpdateManyWithoutRecipeInput
}

input RecipeUpdateManyDataInput {
  title: String
  desc: String
  rules: String
}

input RecipeUpdateManyMutationInput {
  title: String
  desc: String
  rules: String
}

input RecipeUpdateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  disconnect: [RecipeWhereUniqueInput!]
  delete: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RecipeUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeScalarWhereInput!]
  upsert: [RecipeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput!
  data: RecipeUpdateManyDataInput!
}

input RecipeUpdateOneWithoutRecipeContentInput {
  create: RecipeCreateWithoutRecipeContentInput
  connect: RecipeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RecipeUpdateWithoutRecipeContentDataInput
  upsert: RecipeUpsertWithoutRecipeContentInput
}

input RecipeUpdateWithoutAuthorDataInput {
  title: String
  desc: String
  rules: String
  recipeContent: RecipeContentUpdateManyWithoutRecipeInput
}

input RecipeUpdateWithoutRecipeContentDataInput {
  title: String
  desc: String
  rules: String
  author: UserUpdateOneRequiredWithoutRecipesInput
}

input RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateWithoutAuthorDataInput!
}

input RecipeUpsertWithoutRecipeContentInput {
  update: RecipeUpdateWithoutRecipeContentDataInput!
  create: RecipeCreateWithoutRecipeContentInput!
}

input RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  update: RecipeUpdateWithoutAuthorDataInput!
  create: RecipeCreateWithoutAuthorInput!
}

input RecipeWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  rules: String

  """All values that are not equal to given value."""
  rules_not: String

  """All values that are contained in given list."""
  rules_in: [String!]

  """All values that are not contained in given list."""
  rules_not_in: [String!]

  """All values less than the given value."""
  rules_lt: String

  """All values less than or equal the given value."""
  rules_lte: String

  """All values greater than the given value."""
  rules_gt: String

  """All values greater than or equal the given value."""
  rules_gte: String

  """All values containing the given string."""
  rules_contains: String

  """All values not containing the given string."""
  rules_not_contains: String

  """All values starting with the given string."""
  rules_starts_with: String

  """All values not starting with the given string."""
  rules_not_starts_with: String

  """All values ending with the given string."""
  rules_ends_with: String

  """All values not ending with the given string."""
  rules_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  recipeContent_every: RecipeContentWhereInput
  recipeContent_some: RecipeContentWhereInput
  recipeContent_none: RecipeContentWhereInput
}

input RecipeWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
  recipeContent(where: RecipeContentSubscriptionWhereInput): RecipeContentSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  recipes: RecipeCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRecipesInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  recipes: RecipeUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRecipesDataInput
  upsert: UserUpsertWithoutRecipesInput
}

input UserUpdateWithoutRecipesDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput!
  create: UserCreateWithoutRecipesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  recipes_every: RecipeWhereInput
  recipes_some: RecipeWhereInput
  recipes_none: RecipeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
