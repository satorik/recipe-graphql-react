# source: https://recipe-graphql-6137fb7608.herokuapp.com/graphql-prisma/dev
# timestamp: Fri May 17 2019 12:24:49 GMT+0300 (GMT+03:00)

type AggregateIngredient {
  count: Int!
}

type AggregateMenu {
  count: Int!
}

type AggregateMenuContent {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateRecipeContent {
  count: Int!
}

type AggregateShoppingList {
  count: Int!
}

type AggregateShoppingListContent {
  count: Int!
}

type AggregateStorage {
  count: Int!
}

type AggregateStorageContent {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Ingredient implements Node {
  id: ID!
  name: String!
  metrics: String!
  ccal: Int!
  fat: Int!
  carbon: Int!
  protein: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type IngredientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  name: String!
  metrics: String!
  ccal: Int!
  fat: Int!
  carbon: Int!
  protein: Int!
}

input IngredientCreateOneInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
}

"""An edge in a connection."""
type IngredientEdge {
  """The item at the end of the edge."""
  node: Ingredient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  metrics_ASC
  metrics_DESC
  ccal_ASC
  ccal_DESC
  fat_ASC
  fat_DESC
  carbon_ASC
  carbon_DESC
  protein_ASC
  protein_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  metrics: String!
  ccal: Int!
  fat: Int!
  carbon: Int!
  protein: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

input IngredientUpdateDataInput {
  name: String
  metrics: String
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
}

input IngredientUpdateInput {
  name: String
  metrics: String
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
}

input IngredientUpdateManyMutationInput {
  name: String
  metrics: String
  ccal: Int
  fat: Int
  carbon: Int
  protein: Int
}

input IngredientUpdateOneRequiredInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
  update: IngredientUpdateDataInput
  upsert: IngredientUpsertNestedInput
}

input IngredientUpsertNestedInput {
  update: IngredientUpdateDataInput!
  create: IngredientCreateInput!
}

input IngredientWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  metrics: String

  """All values that are not equal to given value."""
  metrics_not: String

  """All values that are contained in given list."""
  metrics_in: [String!]

  """All values that are not contained in given list."""
  metrics_not_in: [String!]

  """All values less than the given value."""
  metrics_lt: String

  """All values less than or equal the given value."""
  metrics_lte: String

  """All values greater than the given value."""
  metrics_gt: String

  """All values greater than or equal the given value."""
  metrics_gte: String

  """All values containing the given string."""
  metrics_contains: String

  """All values not containing the given string."""
  metrics_not_contains: String

  """All values starting with the given string."""
  metrics_starts_with: String

  """All values not starting with the given string."""
  metrics_not_starts_with: String

  """All values ending with the given string."""
  metrics_ends_with: String

  """All values not ending with the given string."""
  metrics_not_ends_with: String
  ccal: Int

  """All values that are not equal to given value."""
  ccal_not: Int

  """All values that are contained in given list."""
  ccal_in: [Int!]

  """All values that are not contained in given list."""
  ccal_not_in: [Int!]

  """All values less than the given value."""
  ccal_lt: Int

  """All values less than or equal the given value."""
  ccal_lte: Int

  """All values greater than the given value."""
  ccal_gt: Int

  """All values greater than or equal the given value."""
  ccal_gte: Int
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbon: Int

  """All values that are not equal to given value."""
  carbon_not: Int

  """All values that are contained in given list."""
  carbon_in: [Int!]

  """All values that are not contained in given list."""
  carbon_not_in: [Int!]

  """All values less than the given value."""
  carbon_lt: Int

  """All values less than or equal the given value."""
  carbon_lte: Int

  """All values greater than the given value."""
  carbon_gt: Int

  """All values greater than or equal the given value."""
  carbon_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input IngredientWhereUniqueInput {
  id: ID
  name: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Menu implements Node {
  id: ID!
  forDate: DateTime!
  author: User!
  menuContent(where: MenuContentWhereInput, orderBy: MenuContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuContent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MenuConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MenuEdge]!
  aggregate: AggregateMenu!
}

type MenuContent implements Node {
  id: ID!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe!]
  for: User!
  type: String
  menu: Menu!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MenuContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MenuContentEdge]!
  aggregate: AggregateMenuContent!
}

input MenuContentCreateInput {
  id: ID
  type: String
  recipes: RecipeCreateManyInput
  for: UserCreateOneInput!
  menu: MenuCreateOneWithoutMenuContentInput!
}

input MenuContentCreateManyWithoutMenuInput {
  create: [MenuContentCreateWithoutMenuInput!]
  connect: [MenuContentWhereUniqueInput!]
}

input MenuContentCreateWithoutMenuInput {
  id: ID
  type: String
  recipes: RecipeCreateManyInput
  for: UserCreateOneInput!
}

"""An edge in a connection."""
type MenuContentEdge {
  """The item at the end of the edge."""
  node: MenuContent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MenuContentOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MenuContentPreviousValues {
  id: ID!
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MenuContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuContentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type MenuContentSubscriptionPayload {
  mutation: MutationType!
  node: MenuContent
  updatedFields: [String!]
  previousValues: MenuContentPreviousValues
}

input MenuContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuContentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MenuContentWhereInput
}

input MenuContentUpdateInput {
  type: String
  recipes: RecipeUpdateManyInput
  for: UserUpdateOneRequiredInput
  menu: MenuUpdateOneRequiredWithoutMenuContentInput
}

input MenuContentUpdateManyDataInput {
  type: String
}

input MenuContentUpdateManyMutationInput {
  type: String
}

input MenuContentUpdateManyWithoutMenuInput {
  create: [MenuContentCreateWithoutMenuInput!]
  connect: [MenuContentWhereUniqueInput!]
  set: [MenuContentWhereUniqueInput!]
  disconnect: [MenuContentWhereUniqueInput!]
  delete: [MenuContentWhereUniqueInput!]
  update: [MenuContentUpdateWithWhereUniqueWithoutMenuInput!]
  updateMany: [MenuContentUpdateManyWithWhereNestedInput!]
  deleteMany: [MenuContentScalarWhereInput!]
  upsert: [MenuContentUpsertWithWhereUniqueWithoutMenuInput!]
}

input MenuContentUpdateManyWithWhereNestedInput {
  where: MenuContentScalarWhereInput!
  data: MenuContentUpdateManyDataInput!
}

input MenuContentUpdateWithoutMenuDataInput {
  type: String
  recipes: RecipeUpdateManyInput
  for: UserUpdateOneRequiredInput
}

input MenuContentUpdateWithWhereUniqueWithoutMenuInput {
  where: MenuContentWhereUniqueInput!
  data: MenuContentUpdateWithoutMenuDataInput!
}

input MenuContentUpsertWithWhereUniqueWithoutMenuInput {
  where: MenuContentWhereUniqueInput!
  update: MenuContentUpdateWithoutMenuDataInput!
  create: MenuContentCreateWithoutMenuInput!
}

input MenuContentWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  recipes_every: RecipeWhereInput
  recipes_some: RecipeWhereInput
  recipes_none: RecipeWhereInput
  for: UserWhereInput
  menu: MenuWhereInput
}

input MenuContentWhereUniqueInput {
  id: ID
}

input MenuCreateInput {
  id: ID
  forDate: DateTime!
  author: UserCreateOneInput!
  menuContent: MenuContentCreateManyWithoutMenuInput
}

input MenuCreateOneWithoutMenuContentInput {
  create: MenuCreateWithoutMenuContentInput
  connect: MenuWhereUniqueInput
}

input MenuCreateWithoutMenuContentInput {
  id: ID
  forDate: DateTime!
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type MenuEdge {
  """The item at the end of the edge."""
  node: Menu!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MenuOrderByInput {
  id_ASC
  id_DESC
  forDate_ASC
  forDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MenuPreviousValues {
  id: ID!
  forDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MenuSubscriptionPayload {
  mutation: MutationType!
  node: Menu
  updatedFields: [String!]
  previousValues: MenuPreviousValues
}

input MenuSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MenuWhereInput
}

input MenuUpdateInput {
  forDate: DateTime
  author: UserUpdateOneRequiredInput
  menuContent: MenuContentUpdateManyWithoutMenuInput
}

input MenuUpdateManyMutationInput {
  forDate: DateTime
}

input MenuUpdateOneRequiredWithoutMenuContentInput {
  create: MenuCreateWithoutMenuContentInput
  connect: MenuWhereUniqueInput
  update: MenuUpdateWithoutMenuContentDataInput
  upsert: MenuUpsertWithoutMenuContentInput
}

input MenuUpdateWithoutMenuContentDataInput {
  forDate: DateTime
  author: UserUpdateOneRequiredInput
}

input MenuUpsertWithoutMenuContentInput {
  update: MenuUpdateWithoutMenuContentDataInput!
  create: MenuCreateWithoutMenuContentInput!
}

input MenuWhereInput {
  """Logical AND on all given filters."""
  AND: [MenuWhereInput!]

  """Logical OR on all given filters."""
  OR: [MenuWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MenuWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  forDate: DateTime

  """All values that are not equal to given value."""
  forDate_not: DateTime

  """All values that are contained in given list."""
  forDate_in: [DateTime!]

  """All values that are not contained in given list."""
  forDate_not_in: [DateTime!]

  """All values less than the given value."""
  forDate_lt: DateTime

  """All values less than or equal the given value."""
  forDate_lte: DateTime

  """All values greater than the given value."""
  forDate_gt: DateTime

  """All values greater than or equal the given value."""
  forDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  menuContent_every: MenuContentWhereInput
  menuContent_some: MenuContentWhereInput
  menuContent_none: MenuContentWhereInput
}

input MenuWhereUniqueInput {
  id: ID
  forDate: DateTime
}

type Mutation {
  createRecipeContent(data: RecipeContentCreateInput!): RecipeContent!
  createMenu(data: MenuCreateInput!): Menu!
  createMenuContent(data: MenuContentCreateInput!): MenuContent!
  createStorage(data: StorageCreateInput!): Storage!
  createStorageContent(data: StorageContentCreateInput!): StorageContent!
  createShoppingList(data: ShoppingListCreateInput!): ShoppingList!
  createShoppingListContent(data: ShoppingListContentCreateInput!): ShoppingListContent!
  createUser(data: UserCreateInput!): User!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  createRecipe(data: RecipeCreateInput!): Recipe!
  updateRecipeContent(data: RecipeContentUpdateInput!, where: RecipeContentWhereUniqueInput!): RecipeContent
  updateMenu(data: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu
  updateMenuContent(data: MenuContentUpdateInput!, where: MenuContentWhereUniqueInput!): MenuContent
  updateStorage(data: StorageUpdateInput!, where: StorageWhereUniqueInput!): Storage
  updateStorageContent(data: StorageContentUpdateInput!, where: StorageContentWhereUniqueInput!): StorageContent
  updateShoppingList(data: ShoppingListUpdateInput!, where: ShoppingListWhereUniqueInput!): ShoppingList
  updateShoppingListContent(data: ShoppingListContentUpdateInput!, where: ShoppingListContentWhereUniqueInput!): ShoppingListContent
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  deleteRecipeContent(where: RecipeContentWhereUniqueInput!): RecipeContent
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteMenuContent(where: MenuContentWhereUniqueInput!): MenuContent
  deleteStorage(where: StorageWhereUniqueInput!): Storage
  deleteStorageContent(where: StorageContentWhereUniqueInput!): StorageContent
  deleteShoppingList(where: ShoppingListWhereUniqueInput!): ShoppingList
  deleteShoppingListContent(where: ShoppingListContentWhereUniqueInput!): ShoppingListContent
  deleteUser(where: UserWhereUniqueInput!): User
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  upsertRecipeContent(where: RecipeContentWhereUniqueInput!, create: RecipeContentCreateInput!, update: RecipeContentUpdateInput!): RecipeContent!
  upsertMenu(where: MenuWhereUniqueInput!, create: MenuCreateInput!, update: MenuUpdateInput!): Menu!
  upsertMenuContent(where: MenuContentWhereUniqueInput!, create: MenuContentCreateInput!, update: MenuContentUpdateInput!): MenuContent!
  upsertStorage(where: StorageWhereUniqueInput!, create: StorageCreateInput!, update: StorageUpdateInput!): Storage!
  upsertStorageContent(where: StorageContentWhereUniqueInput!, create: StorageContentCreateInput!, update: StorageContentUpdateInput!): StorageContent!
  upsertShoppingList(where: ShoppingListWhereUniqueInput!, create: ShoppingListCreateInput!, update: ShoppingListUpdateInput!): ShoppingList!
  upsertShoppingListContent(where: ShoppingListContentWhereUniqueInput!, create: ShoppingListContentCreateInput!, update: ShoppingListContentUpdateInput!): ShoppingListContent!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  updateManyRecipeContents(data: RecipeContentUpdateManyMutationInput!, where: RecipeContentWhereInput): BatchPayload!
  updateManyMenus(data: MenuUpdateManyMutationInput!, where: MenuWhereInput): BatchPayload!
  updateManyMenuContents(data: MenuContentUpdateManyMutationInput!, where: MenuContentWhereInput): BatchPayload!
  updateManyStorageContents(data: StorageContentUpdateManyMutationInput!, where: StorageContentWhereInput): BatchPayload!
  updateManyShoppingLists(data: ShoppingListUpdateManyMutationInput!, where: ShoppingListWhereInput): BatchPayload!
  updateManyShoppingListContents(data: ShoppingListContentUpdateManyMutationInput!, where: ShoppingListContentWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  updateManyRecipes(data: RecipeUpdateManyMutationInput!, where: RecipeWhereInput): BatchPayload!
  deleteManyRecipeContents(where: RecipeContentWhereInput): BatchPayload!
  deleteManyMenus(where: MenuWhereInput): BatchPayload!
  deleteManyMenuContents(where: MenuContentWhereInput): BatchPayload!
  deleteManyStorages(where: StorageWhereInput): BatchPayload!
  deleteManyStorageContents(where: StorageContentWhereInput): BatchPayload!
  deleteManyShoppingLists(where: ShoppingListWhereInput): BatchPayload!
  deleteManyShoppingListContents(where: ShoppingListContentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  recipeContents(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeContent]!
  menus(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Menu]!
  menuContents(where: MenuContentWhereInput, orderBy: MenuContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuContent]!
  storages(where: StorageWhereInput, orderBy: StorageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Storage]!
  storageContents(where: StorageContentWhereInput, orderBy: StorageContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StorageContent]!
  shoppingLists(where: ShoppingListWhereInput, orderBy: ShoppingListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShoppingList]!
  shoppingListContents(where: ShoppingListContentWhereInput, orderBy: ShoppingListContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShoppingListContent]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  recipeContent(where: RecipeContentWhereUniqueInput!): RecipeContent
  menu(where: MenuWhereUniqueInput!): Menu
  menuContent(where: MenuContentWhereUniqueInput!): MenuContent
  storage(where: StorageWhereUniqueInput!): Storage
  storageContent(where: StorageContentWhereUniqueInput!): StorageContent
  shoppingList(where: ShoppingListWhereUniqueInput!): ShoppingList
  shoppingListContent(where: ShoppingListContentWhereUniqueInput!): ShoppingListContent
  user(where: UserWhereUniqueInput!): User
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipeContentsConnection(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeContentConnection!
  menusConnection(where: MenuWhereInput, orderBy: MenuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuConnection!
  menuContentsConnection(where: MenuContentWhereInput, orderBy: MenuContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuContentConnection!
  storagesConnection(where: StorageWhereInput, orderBy: StorageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StorageConnection!
  storageContentsConnection(where: StorageContentWhereInput, orderBy: StorageContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StorageContentConnection!
  shoppingListsConnection(where: ShoppingListWhereInput, orderBy: ShoppingListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoppingListConnection!
  shoppingListContentsConnection(where: ShoppingListContentWhereInput, orderBy: ShoppingListContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShoppingListContentConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Recipe implements Node {
  id: ID!
  title: String!
  desc: String
  rules: String!
  author: User!
  recipeContent(where: RecipeContentWhereInput, orderBy: RecipeContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeContent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RecipeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

type RecipeContent implements Node {
  id: ID!
  ingredient: Ingredient!
  amount: Float!
  recipe: Recipe!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RecipeContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecipeContentEdge]!
  aggregate: AggregateRecipeContent!
}

input RecipeContentCreateInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneInput!
  recipe: RecipeCreateOneWithoutRecipeContentInput!
}

input RecipeContentCreateManyWithoutRecipeInput {
  create: [RecipeContentCreateWithoutRecipeInput!]
  connect: [RecipeContentWhereUniqueInput!]
}

input RecipeContentCreateWithoutRecipeInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneInput!
}

"""An edge in a connection."""
type RecipeContentEdge {
  """The item at the end of the edge."""
  node: RecipeContent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecipeContentOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecipeContentPreviousValues {
  id: ID!
  amount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RecipeContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeContentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RecipeContentSubscriptionPayload {
  mutation: MutationType!
  node: RecipeContent
  updatedFields: [String!]
  previousValues: RecipeContentPreviousValues
}

input RecipeContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeContentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecipeContentWhereInput
}

input RecipeContentUpdateInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredInput
  recipe: RecipeUpdateOneRequiredWithoutRecipeContentInput
}

input RecipeContentUpdateManyDataInput {
  amount: Float
}

input RecipeContentUpdateManyMutationInput {
  amount: Float
}

input RecipeContentUpdateManyWithoutRecipeInput {
  create: [RecipeContentCreateWithoutRecipeInput!]
  connect: [RecipeContentWhereUniqueInput!]
  set: [RecipeContentWhereUniqueInput!]
  disconnect: [RecipeContentWhereUniqueInput!]
  delete: [RecipeContentWhereUniqueInput!]
  update: [RecipeContentUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [RecipeContentUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeContentScalarWhereInput!]
  upsert: [RecipeContentUpsertWithWhereUniqueWithoutRecipeInput!]
}

input RecipeContentUpdateManyWithWhereNestedInput {
  where: RecipeContentScalarWhereInput!
  data: RecipeContentUpdateManyDataInput!
}

input RecipeContentUpdateWithoutRecipeDataInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredInput
}

input RecipeContentUpdateWithWhereUniqueWithoutRecipeInput {
  where: RecipeContentWhereUniqueInput!
  data: RecipeContentUpdateWithoutRecipeDataInput!
}

input RecipeContentUpsertWithWhereUniqueWithoutRecipeInput {
  where: RecipeContentWhereUniqueInput!
  update: RecipeContentUpdateWithoutRecipeDataInput!
  create: RecipeContentCreateWithoutRecipeInput!
}

input RecipeContentWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  ingredient: IngredientWhereInput
  recipe: RecipeWhereInput
}

input RecipeContentWhereUniqueInput {
  id: ID
}

input RecipeCreateInput {
  id: ID
  title: String!
  desc: String
  rules: String!
  author: UserCreateOneWithoutRecipesInput!
  recipeContent: RecipeContentCreateManyWithoutRecipeInput
}

input RecipeCreateManyInput {
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
}

input RecipeCreateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
}

input RecipeCreateOneWithoutRecipeContentInput {
  create: RecipeCreateWithoutRecipeContentInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutAuthorInput {
  id: ID
  title: String!
  desc: String
  rules: String!
  recipeContent: RecipeContentCreateManyWithoutRecipeInput
}

input RecipeCreateWithoutRecipeContentInput {
  id: ID
  title: String!
  desc: String
  rules: String!
  author: UserCreateOneWithoutRecipesInput!
}

"""An edge in a connection."""
type RecipeEdge {
  """The item at the end of the edge."""
  node: Recipe!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  desc_ASC
  desc_DESC
  rules_ASC
  rules_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecipePreviousValues {
  id: ID!
  title: String!
  desc: String
  rules: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RecipeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  rules: String

  """All values that are not equal to given value."""
  rules_not: String

  """All values that are contained in given list."""
  rules_in: [String!]

  """All values that are not contained in given list."""
  rules_not_in: [String!]

  """All values less than the given value."""
  rules_lt: String

  """All values less than or equal the given value."""
  rules_lte: String

  """All values greater than the given value."""
  rules_gt: String

  """All values greater than or equal the given value."""
  rules_gte: String

  """All values containing the given string."""
  rules_contains: String

  """All values not containing the given string."""
  rules_not_contains: String

  """All values starting with the given string."""
  rules_starts_with: String

  """All values not starting with the given string."""
  rules_not_starts_with: String

  """All values ending with the given string."""
  rules_ends_with: String

  """All values not ending with the given string."""
  rules_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
}

input RecipeUpdateDataInput {
  title: String
  desc: String
  rules: String
  author: UserUpdateOneRequiredWithoutRecipesInput
  recipeContent: RecipeContentUpdateManyWithoutRecipeInput
}

input RecipeUpdateInput {
  title: String
  desc: String
  rules: String
  author: UserUpdateOneRequiredWithoutRecipesInput
  recipeContent: RecipeContentUpdateManyWithoutRecipeInput
}

input RecipeUpdateManyDataInput {
  title: String
  desc: String
  rules: String
}

input RecipeUpdateManyInput {
  create: [RecipeCreateInput!]
  connect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  disconnect: [RecipeWhereUniqueInput!]
  delete: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueNestedInput!]
  updateMany: [RecipeUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeScalarWhereInput!]
  upsert: [RecipeUpsertWithWhereUniqueNestedInput!]
}

input RecipeUpdateManyMutationInput {
  title: String
  desc: String
  rules: String
}

input RecipeUpdateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  disconnect: [RecipeWhereUniqueInput!]
  delete: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RecipeUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeScalarWhereInput!]
  upsert: [RecipeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput!
  data: RecipeUpdateManyDataInput!
}

input RecipeUpdateOneRequiredWithoutRecipeContentInput {
  create: RecipeCreateWithoutRecipeContentInput
  connect: RecipeWhereUniqueInput
  update: RecipeUpdateWithoutRecipeContentDataInput
  upsert: RecipeUpsertWithoutRecipeContentInput
}

input RecipeUpdateWithoutAuthorDataInput {
  title: String
  desc: String
  rules: String
  recipeContent: RecipeContentUpdateManyWithoutRecipeInput
}

input RecipeUpdateWithoutRecipeContentDataInput {
  title: String
  desc: String
  rules: String
  author: UserUpdateOneRequiredWithoutRecipesInput
}

input RecipeUpdateWithWhereUniqueNestedInput {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateDataInput!
}

input RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateWithoutAuthorDataInput!
}

input RecipeUpsertWithoutRecipeContentInput {
  update: RecipeUpdateWithoutRecipeContentDataInput!
  create: RecipeCreateWithoutRecipeContentInput!
}

input RecipeUpsertWithWhereUniqueNestedInput {
  where: RecipeWhereUniqueInput!
  update: RecipeUpdateDataInput!
  create: RecipeCreateInput!
}

input RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  update: RecipeUpdateWithoutAuthorDataInput!
  create: RecipeCreateWithoutAuthorInput!
}

input RecipeWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  desc: String

  """All values that are not equal to given value."""
  desc_not: String

  """All values that are contained in given list."""
  desc_in: [String!]

  """All values that are not contained in given list."""
  desc_not_in: [String!]

  """All values less than the given value."""
  desc_lt: String

  """All values less than or equal the given value."""
  desc_lte: String

  """All values greater than the given value."""
  desc_gt: String

  """All values greater than or equal the given value."""
  desc_gte: String

  """All values containing the given string."""
  desc_contains: String

  """All values not containing the given string."""
  desc_not_contains: String

  """All values starting with the given string."""
  desc_starts_with: String

  """All values not starting with the given string."""
  desc_not_starts_with: String

  """All values ending with the given string."""
  desc_ends_with: String

  """All values not ending with the given string."""
  desc_not_ends_with: String
  rules: String

  """All values that are not equal to given value."""
  rules_not: String

  """All values that are contained in given list."""
  rules_in: [String!]

  """All values that are not contained in given list."""
  rules_not_in: [String!]

  """All values less than the given value."""
  rules_lt: String

  """All values less than or equal the given value."""
  rules_lte: String

  """All values greater than the given value."""
  rules_gt: String

  """All values greater than or equal the given value."""
  rules_gte: String

  """All values containing the given string."""
  rules_contains: String

  """All values not containing the given string."""
  rules_not_contains: String

  """All values starting with the given string."""
  rules_starts_with: String

  """All values not starting with the given string."""
  rules_not_starts_with: String

  """All values ending with the given string."""
  rules_ends_with: String

  """All values not ending with the given string."""
  rules_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  recipeContent_every: RecipeContentWhereInput
  recipeContent_some: RecipeContentWhereInput
  recipeContent_none: RecipeContentWhereInput
}

input RecipeWhereUniqueInput {
  id: ID
}

type ShoppingList implements Node {
  id: ID!
  author: User!
  status: ShoppingListStatus!
  shoppingListContent(where: ShoppingListContentWhereInput, orderBy: ShoppingListContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ShoppingListContent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ShoppingListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShoppingListEdge]!
  aggregate: AggregateShoppingList!
}

type ShoppingListContent implements Node {
  id: ID!
  ingredient: Ingredient!
  amount: Float!
  shoppingList: ShoppingList!
}

"""A connection to a list of items."""
type ShoppingListContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShoppingListContentEdge]!
  aggregate: AggregateShoppingListContent!
}

input ShoppingListContentCreateInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneInput!
  shoppingList: ShoppingListCreateOneWithoutShoppingListContentInput!
}

input ShoppingListContentCreateManyWithoutShoppingListInput {
  create: [ShoppingListContentCreateWithoutShoppingListInput!]
  connect: [ShoppingListContentWhereUniqueInput!]
}

input ShoppingListContentCreateWithoutShoppingListInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneInput!
}

"""An edge in a connection."""
type ShoppingListContentEdge {
  """The item at the end of the edge."""
  node: ShoppingListContent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShoppingListContentOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type ShoppingListContentPreviousValues {
  id: ID!
  amount: Float!
}

input ShoppingListContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ShoppingListContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShoppingListContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShoppingListContentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
}

type ShoppingListContentSubscriptionPayload {
  mutation: MutationType!
  node: ShoppingListContent
  updatedFields: [String!]
  previousValues: ShoppingListContentPreviousValues
}

input ShoppingListContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShoppingListContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShoppingListContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShoppingListContentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShoppingListContentWhereInput
}

input ShoppingListContentUpdateInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredInput
  shoppingList: ShoppingListUpdateOneRequiredWithoutShoppingListContentInput
}

input ShoppingListContentUpdateManyDataInput {
  amount: Float
}

input ShoppingListContentUpdateManyMutationInput {
  amount: Float
}

input ShoppingListContentUpdateManyWithoutShoppingListInput {
  create: [ShoppingListContentCreateWithoutShoppingListInput!]
  connect: [ShoppingListContentWhereUniqueInput!]
  set: [ShoppingListContentWhereUniqueInput!]
  disconnect: [ShoppingListContentWhereUniqueInput!]
  delete: [ShoppingListContentWhereUniqueInput!]
  update: [ShoppingListContentUpdateWithWhereUniqueWithoutShoppingListInput!]
  updateMany: [ShoppingListContentUpdateManyWithWhereNestedInput!]
  deleteMany: [ShoppingListContentScalarWhereInput!]
  upsert: [ShoppingListContentUpsertWithWhereUniqueWithoutShoppingListInput!]
}

input ShoppingListContentUpdateManyWithWhereNestedInput {
  where: ShoppingListContentScalarWhereInput!
  data: ShoppingListContentUpdateManyDataInput!
}

input ShoppingListContentUpdateWithoutShoppingListDataInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredInput
}

input ShoppingListContentUpdateWithWhereUniqueWithoutShoppingListInput {
  where: ShoppingListContentWhereUniqueInput!
  data: ShoppingListContentUpdateWithoutShoppingListDataInput!
}

input ShoppingListContentUpsertWithWhereUniqueWithoutShoppingListInput {
  where: ShoppingListContentWhereUniqueInput!
  update: ShoppingListContentUpdateWithoutShoppingListDataInput!
  create: ShoppingListContentCreateWithoutShoppingListInput!
}

input ShoppingListContentWhereInput {
  """Logical AND on all given filters."""
  AND: [ShoppingListContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShoppingListContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShoppingListContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  ingredient: IngredientWhereInput
  shoppingList: ShoppingListWhereInput
}

input ShoppingListContentWhereUniqueInput {
  id: ID
}

input ShoppingListCreateInput {
  id: ID
  status: ShoppingListStatus!
  author: UserCreateOneInput!
  shoppingListContent: ShoppingListContentCreateManyWithoutShoppingListInput
}

input ShoppingListCreateOneWithoutShoppingListContentInput {
  create: ShoppingListCreateWithoutShoppingListContentInput
  connect: ShoppingListWhereUniqueInput
}

input ShoppingListCreateWithoutShoppingListContentInput {
  id: ID
  status: ShoppingListStatus!
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type ShoppingListEdge {
  """The item at the end of the edge."""
  node: ShoppingList!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShoppingListOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShoppingListPreviousValues {
  id: ID!
  status: ShoppingListStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ShoppingListStatus {
  CREATED
  TODO
  FINISHED
}

type ShoppingListSubscriptionPayload {
  mutation: MutationType!
  node: ShoppingList
  updatedFields: [String!]
  previousValues: ShoppingListPreviousValues
}

input ShoppingListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShoppingListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShoppingListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShoppingListSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShoppingListWhereInput
}

input ShoppingListUpdateInput {
  status: ShoppingListStatus
  author: UserUpdateOneRequiredInput
  shoppingListContent: ShoppingListContentUpdateManyWithoutShoppingListInput
}

input ShoppingListUpdateManyMutationInput {
  status: ShoppingListStatus
}

input ShoppingListUpdateOneRequiredWithoutShoppingListContentInput {
  create: ShoppingListCreateWithoutShoppingListContentInput
  connect: ShoppingListWhereUniqueInput
  update: ShoppingListUpdateWithoutShoppingListContentDataInput
  upsert: ShoppingListUpsertWithoutShoppingListContentInput
}

input ShoppingListUpdateWithoutShoppingListContentDataInput {
  status: ShoppingListStatus
  author: UserUpdateOneRequiredInput
}

input ShoppingListUpsertWithoutShoppingListContentInput {
  update: ShoppingListUpdateWithoutShoppingListContentDataInput!
  create: ShoppingListCreateWithoutShoppingListContentInput!
}

input ShoppingListWhereInput {
  """Logical AND on all given filters."""
  AND: [ShoppingListWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShoppingListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShoppingListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: ShoppingListStatus

  """All values that are not equal to given value."""
  status_not: ShoppingListStatus

  """All values that are contained in given list."""
  status_in: [ShoppingListStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ShoppingListStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  shoppingListContent_every: ShoppingListContentWhereInput
  shoppingListContent_some: ShoppingListContentWhereInput
  shoppingListContent_none: ShoppingListContentWhereInput
}

input ShoppingListWhereUniqueInput {
  id: ID
}

type Storage implements Node {
  id: ID!
  author: User!
  storageContent(where: StorageContentWhereInput, orderBy: StorageContentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StorageContent!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StorageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StorageEdge]!
  aggregate: AggregateStorage!
}

type StorageContent implements Node {
  id: ID!
  ingredient: Ingredient!
  amount: Float!
  storage: Storage!
}

"""A connection to a list of items."""
type StorageContentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StorageContentEdge]!
  aggregate: AggregateStorageContent!
}

input StorageContentCreateInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneInput!
  storage: StorageCreateOneWithoutStorageContentInput!
}

input StorageContentCreateManyWithoutStorageInput {
  create: [StorageContentCreateWithoutStorageInput!]
  connect: [StorageContentWhereUniqueInput!]
}

input StorageContentCreateWithoutStorageInput {
  id: ID
  amount: Float!
  ingredient: IngredientCreateOneInput!
}

"""An edge in a connection."""
type StorageContentEdge {
  """The item at the end of the edge."""
  node: StorageContent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StorageContentOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type StorageContentPreviousValues {
  id: ID!
  amount: Float!
}

input StorageContentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StorageContentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorageContentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorageContentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
}

type StorageContentSubscriptionPayload {
  mutation: MutationType!
  node: StorageContent
  updatedFields: [String!]
  previousValues: StorageContentPreviousValues
}

input StorageContentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StorageContentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorageContentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorageContentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StorageContentWhereInput
}

input StorageContentUpdateInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredInput
  storage: StorageUpdateOneRequiredWithoutStorageContentInput
}

input StorageContentUpdateManyDataInput {
  amount: Float
}

input StorageContentUpdateManyMutationInput {
  amount: Float
}

input StorageContentUpdateManyWithoutStorageInput {
  create: [StorageContentCreateWithoutStorageInput!]
  connect: [StorageContentWhereUniqueInput!]
  set: [StorageContentWhereUniqueInput!]
  disconnect: [StorageContentWhereUniqueInput!]
  delete: [StorageContentWhereUniqueInput!]
  update: [StorageContentUpdateWithWhereUniqueWithoutStorageInput!]
  updateMany: [StorageContentUpdateManyWithWhereNestedInput!]
  deleteMany: [StorageContentScalarWhereInput!]
  upsert: [StorageContentUpsertWithWhereUniqueWithoutStorageInput!]
}

input StorageContentUpdateManyWithWhereNestedInput {
  where: StorageContentScalarWhereInput!
  data: StorageContentUpdateManyDataInput!
}

input StorageContentUpdateWithoutStorageDataInput {
  amount: Float
  ingredient: IngredientUpdateOneRequiredInput
}

input StorageContentUpdateWithWhereUniqueWithoutStorageInput {
  where: StorageContentWhereUniqueInput!
  data: StorageContentUpdateWithoutStorageDataInput!
}

input StorageContentUpsertWithWhereUniqueWithoutStorageInput {
  where: StorageContentWhereUniqueInput!
  update: StorageContentUpdateWithoutStorageDataInput!
  create: StorageContentCreateWithoutStorageInput!
}

input StorageContentWhereInput {
  """Logical AND on all given filters."""
  AND: [StorageContentWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorageContentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorageContentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  ingredient: IngredientWhereInput
  storage: StorageWhereInput
}

input StorageContentWhereUniqueInput {
  id: ID
}

input StorageCreateInput {
  id: ID
  author: UserCreateOneInput!
  storageContent: StorageContentCreateManyWithoutStorageInput
}

input StorageCreateOneWithoutStorageContentInput {
  create: StorageCreateWithoutStorageContentInput
  connect: StorageWhereUniqueInput
}

input StorageCreateWithoutStorageContentInput {
  id: ID
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type StorageEdge {
  """The item at the end of the edge."""
  node: Storage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StorageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StoragePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StorageSubscriptionPayload {
  mutation: MutationType!
  node: Storage
  updatedFields: [String!]
  previousValues: StoragePreviousValues
}

input StorageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StorageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StorageWhereInput
}

input StorageUpdateInput {
  author: UserUpdateOneRequiredInput
  storageContent: StorageContentUpdateManyWithoutStorageInput
}

input StorageUpdateOneRequiredWithoutStorageContentInput {
  create: StorageCreateWithoutStorageContentInput
  connect: StorageWhereUniqueInput
  update: StorageUpdateWithoutStorageContentDataInput
  upsert: StorageUpsertWithoutStorageContentInput
}

input StorageUpdateWithoutStorageContentDataInput {
  author: UserUpdateOneRequiredInput
}

input StorageUpsertWithoutStorageContentInput {
  update: StorageUpdateWithoutStorageContentDataInput!
  create: StorageCreateWithoutStorageContentInput!
}

input StorageWhereInput {
  """Logical AND on all given filters."""
  AND: [StorageWhereInput!]

  """Logical OR on all given filters."""
  OR: [StorageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StorageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserWhereInput
  storageContent_every: StorageContentWhereInput
  storageContent_some: StorageContentWhereInput
  storageContent_none: StorageContentWhereInput
}

input StorageWhereUniqueInput {
  id: ID
}

type Subscription {
  recipeContent(where: RecipeContentSubscriptionWhereInput): RecipeContentSubscriptionPayload
  menu(where: MenuSubscriptionWhereInput): MenuSubscriptionPayload
  menuContent(where: MenuContentSubscriptionWhereInput): MenuContentSubscriptionPayload
  storage(where: StorageSubscriptionWhereInput): StorageSubscriptionPayload
  storageContent(where: StorageContentSubscriptionWhereInput): StorageContentSubscriptionPayload
  shoppingList(where: ShoppingListSubscriptionWhereInput): ShoppingListSubscriptionPayload
  shoppingListContent(where: ShoppingListContentSubscriptionWhereInput): ShoppingListContentSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  recipes: RecipeCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRecipesInput {
  id: ID
  name: String!
  email: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  recipes: RecipeUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  name: String
  email: String
  recipes: RecipeUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRecipesDataInput
  upsert: UserUpsertWithoutRecipesInput
}

input UserUpdateWithoutRecipesDataInput {
  name: String
  email: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput!
  create: UserCreateWithoutRecipesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  recipes_every: RecipeWhereInput
  recipes_some: RecipeWhereInput
  recipes_none: RecipeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
